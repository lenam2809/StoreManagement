@page "/"
@using Microsoft.JSInterop
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService ToastService



<h3>Customer List</h3>
<button class="btn btn-primary" @onclick="NavigateToAddCustomer">Add Customer</button>

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Age</th>
            <th>Address</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var customer in customers)
        {
            <tr>
                <td>@customer.Id</td>
                <td>@customer.Name</td>
                <td>@customer.Age</td>
                <td>@customer.Address</td>
                <td>
                    <button class="btn btn-info" @onclick="() => EditCustomer(customer.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => ConfirmDeleteCustomer(customer.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    List<CustomerDTO> customers = new();

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    private async Task GetData() => customers = await CustomerService.GetCustomers();

    void EditCustomer(int customerId)
    {
        NavigationManager.NavigateTo($"/customers/edit/{customerId}");
    }

    int selectedCustomerId;

    async Task ConfirmDeleteCustomer(int customerId)
    {
        selectedCustomerId = customerId;

        // Hiển thị cửa sổ xác nhận (confirm dialog)
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");
        if (confirmed)
        {
            // Nếu xác nhận xóa, thực hiện xóa và cập nhật danh sách
            await DeleteCustomer(selectedCustomerId);
        }
    }

    async Task DeleteCustomer(int customerId)
    {
        // Thực hiện xóa
        var response =  await CustomerService.DeleteCustomer(customerId);
        if (!response.Flag)
        {
            ToastService.ShowError(response.Message);
        }
        ToastService.ShowSuccess(response.Message);
        // Cập nhật danh sách sau khi xóa
        await GetData();
        StateHasChanged();
    }

    private void NavigateToAddCustomer()
    {
        NavigationManager.NavigateTo("/customers/add");
    }
}